#!/usr/bin/env ruby

require 'cloudapp'
require 'cloudapp/credentials'
require 'cloudapp/cli/prompt'
require 'cloudapp/service'

def service
  CloudApp::Service.using_token(token)
    .on_error(&method(:service_error_handler))
end

def token_for_account credentials
  CloudApp::Service
    .token_for_account(*credentials, &method(:service_error_handler))
end

def service_error_handler representation
  if representation.collection.error
    puts
    puts "! #{representation.collection.error.message}"
    puts
  end
end

def token
  Credentials.token
end

def valid_token?
  !token.nil? and service.root.authorized?
end

def error error
  puts "ERROR: #{error}"
  exit 9
end

def valid_url? url
  error 'URL missing' if url.nil?
  error "#{ url } doesn't look like a valid URL" unless url =~ URI.regexp
  true
end

def valid_file? file
  error "File doesn't exist" if file.is_a? Errno::ENOENT
  error 'File missing'       if file.nil? or file == STDIN
  not file.closed?
end

def next_file
  ARGF.file rescue $!
end

def print_version
  puts CloudApp::VERSION
  exit
end


print_version if ARGV.delete('--version') || ARGV.delete('-v')

while not valid_token?
  credentials = CloudApp::CLI::Prompt.new.ask_for_credentials
  token = token_for_account credentials
  Credentials.save_token token
end

link = ARGV.delete('--direct') || ARGV.delete('-d') ? :embed : :canonical

case ARGV.shift
when 'bookmark'
  link = :canonical  # No such thing as an embed link for a bookmark.
  while url = ARGV.shift
    break unless valid_url? url
    bookmark = service.bookmark(url)
    puts bookmark.link(link)
  end
when 'upload'
  while file = next_file
    break unless valid_file? file
    upload = service.upload(file)
    puts upload.link(link) if upload
    ARGF.skip
  end
else
  puts <<EOS
Usage:
    cloudapp bookmark http://getcloudapp.com
    cloudapp upload screenshot.png
EOS
end
