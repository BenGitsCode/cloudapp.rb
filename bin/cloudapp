#!/usr/bin/env ruby

require 'cloudapp'
require 'cloudapp/credentials'
require 'cloudapp/cli/prompt'
require 'cloudapp/service'
require 'clipboard'

def service
  CloudApp::Service.using_token(token)
    .on_error(&method(:service_error_handler))
end

def token_for_account credentials
  CloudApp::Service
    .token_for_account(*credentials, &method(:service_error_handler))
end

def service_error_handler representation
  if representation.collection.error
    print_error representation.collection.error.message
  end
end

def print_error message
  $stderr.puts
  $stderr.puts "! #{message}"
  $stderr.puts
end

def print_link link
  $stdout.puts link
  $stderr.puts link unless $stdout.tty?
end

def error message
  print_error message
  exit 1
end

def token
  Credentials.token
end

def valid_token?
  !token.nil? and service.root.authorized?
end

def print_version
  $stdout.puts CloudApp::VERSION
  exit
end

def copy content
  Clipboard.copy content
end

def validate_url url
  error "#{url} doesn't look like a valid URL" unless url =~ URI.regexp
end

def validate_file path
  error "#{path.inspect} doesn't exist" unless File.exists? path
end


print_version if ARGV.delete('--version') || ARGV.delete('-v')

while not valid_token?
  credentials = CloudApp::CLI::Prompt.new.ask_for_credentials
  token = token_for_account credentials
  Credentials.save_token token
end

link_type = ARGV.delete('--direct') || ARGV.delete('-d') ? :embed : :canonical
copy      = ARGV.delete('--no-copy').nil?

case ARGV.shift
when 'bookmark'
  error 'Missing URL' if ARGV.empty?

  link_type = :canonical  # No such thing as an embed link for a bookmark.
  while url = ARGV.shift
    $stderr.print "Bookmarking #{url}... "
    validate_url url
    bookmark = service.bookmark(url)
    exit 1 unless bookmark

    link = bookmark.link(link_type)
    copy link if copy
    print_link link
  end

when 'upload'
  error 'Missing file' if ARGV.empty?

  while path = ARGV.shift
    $stderr.print "Uploading #{File.basename(path)}... "
    validate_file path
    upload = service.upload(path)
    exit 1 unless upload

    link = upload.link(link_type)
    copy link if copy
    print_link link
  end

else
  $stderr.puts <<EOS
Usage:
    cloudapp bookmark http://getcloudapp.com
    cloudapp upload screenshot.png
EOS
end
