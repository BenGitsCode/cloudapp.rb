#!/usr/bin/env ruby
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rubygems'
require 'gli'
require 'pathname'

require 'cloudapp'
require 'cloudapp/drop_presenter'
require 'cloudapp/drop_service'
require 'cloudapp/identity'


def service(global_options)
  identity = CloudApp::Identity.from_config global_options
  CloudApp::DropService.as_identity(identity).tap do |service|
    service.logger.level = Logger::WARN
  end
end

def check_for_credentials(global_options)
  return unless global_options[:email].nil? and global_options[:password].nil?

  exit_now! [
    'CloudApp credentials missing. Save them to ~/.cloudapp.rc using:',
    '  cloudapp --email=<email> --password=<password> initconfig' ].join("\n"),
    1
end

def format_from(global_options)
  set_default_format global_options
  global_options[:format].to_sym
end

def set_default_format(global_options)
  return unless global_options[:format].nil?
  global_options[:format] = $stdout.tty? ? :pretty : :csv
end

def privacy_from(options)
  if options[:private] || options[:public]
    options[:private] || !options[:public]
  end
end


include GLI

program_desc 'All the pleasures of CloudApp now at your terminal'
version CloudApp::VERSION
config_file '.cloudapp.rc'

desc 'CloudApp account email'
arg_name 'email'
flag :email

desc 'CloudApp account password'
arg_name 'password'
flag :password

desc 'Output format (default: pretty for tty, csv otherwise)'
arg_name 'csv|pretty'
flag [:f, :format]

desc 'Create a new bookmark to each url and print each link'
arg_name 'url [url...]'
command [:bookmark, :shorten] do |c|

  c.desc 'Use a private (long) link'
  c.switch :private

  c.desc 'Use a public (short) link'
  c.switch :public

  c.action do |global_options, options, urls|
    check_for_credentials global_options
    format  = format_from global_options
    private = privacy_from options

    urls.each do |url|
      url     = URI.parse url
      waiting = "Bookmarking #{ url }... "

      CloudApp::DropPresenter.print(on:      $stdout,
                                    waiting: waiting,
                                    format:  format) do
        new_options = { url: url }
        new_options[:private] = private unless private.nil?

        new_drop = service(global_options).create new_options
        new_drop.url
      end
    end
  end
end

desc 'Upload each file and print each link'
arg_name 'file [file...]'
command :upload do |c|

  c.desc 'Use a private (long) link'
  c.switch :private

  c.desc 'Use a public (short) link'
  c.switch :public

  c.action do |global_options, options, files|
    check_for_credentials global_options
    format  = format_from global_options
    private = privacy_from options

    files.each do |file|
      file    = Pathname.new file
      waiting = "Uploading #{ file }... "

      CloudApp::DropPresenter.print(on:      $stdout,
                                    waiting: waiting,
                                    format:  format) do
        new_options = { path: file }
        new_options[:private] = private unless private.nil?

        new_drop = service(global_options).create new_options
        new_drop.url
      end
    end
  end
end

desc 'List the most recent drops'
command [:list, :ls] do |c|

  c.desc 'Number of drops to display'
  c.arg_name 'count'
  c.default_value '20'
  c.flag :n, :count

  c.action do |global_options, options, args|
    check_for_credentials global_options

    count   = options[:count].to_i
    columns = { name: 'Name', url: 'Link', view_counter: 'Views' }
    format  = format_from global_options

    CloudApp::DropPresenter.print(on:      $stdout,
                                  columns: columns,
                                  format:  format) do
      service(global_options).drops count
    end
  end
end

exit GLI.run(ARGV)
