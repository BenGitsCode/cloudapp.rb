#!/usr/bin/env ruby

require 'cloudapp'
require 'cloudapp/credentials'
require 'cloudapp/cli/options'
require 'cloudapp/cli/prompt'
require 'cloudapp/service'
require 'clipboard'

def service
  CloudApp::Service.using_token(token)
    .on_error(&method(:service_error_handler))
end

def token_for_account credentials
  CloudApp::Service
    .token_for_account(*credentials, &method(:service_error_handler))
end

def service_error_handler representation
  if representation.collection.error
    message = representation.collection.error.message
    if representation.collection.error.code == 'upgrade'
      message << ' '
      message << representation.link('upgrade').href
    end
    print_error message
  end
end

def token
  Credentials.token
end

def valid_token?
  !token.nil? and service.root.authorized?
end

def authenticate
  while not valid_token?
    credentials = CloudApp::CLI::Prompt.new.ask_for_credentials
    token = token_for_account credentials
    Credentials.save_token token
  end
end

def fetch_link drop, link_type, copy_link
  link = drop.link(link_type)
  copy link if copy_link
  $stdout.puts link
  $stderr.puts link unless $stdout.tty?
end


def print_error message
  $stderr.puts
  $stderr.puts
  $stderr.puts "! #{wrap(message, 78, '  ')}"
  $stderr.puts
end

def error message
  print_error message
  exit 1
end

def wrap message, width, padding
  message.gsub(/(.{1,#{width}})(\s+|$)/, "\\1\n#{padding}").strip
end

def print_version
  $stdout.puts CloudApp::VERSION
  exit
end

def print_help io = $stdout
  io.puts <<EOS
cloudapp, version #{CloudApp::VERSION}

Usage:
    cloudapp bookmark [--direct] [--[no-]copy] <url> [<url>...]
    cloudapp upload   [--direct] [--[no-]copy] <file> [<file>...]

EOS
end

def copy content
  Clipboard.copy content
end

def invalid_command
  print_help $stderr
  exit 1
end

def bookmark options
  error 'Missing URL to bookmark.' if options.arguments.empty?
  authenticate
  options.arguments.each do |arg|
    $stderr.print "Bookmarking #{arg}... "
    error "#{arg} doesn't look like a valid URL" unless arg =~ URI.regexp
    bookmark = service.bookmark(arg)
    exit 1 unless bookmark
    fetch_link bookmark, options.link_type, options.copy_link?
  end
end

def upload options
  error 'Missing file to upload.' if options.arguments.empty?
  authenticate
  options.arguments.each do |arg|
    $stderr.print "Uploading #{File.basename(arg)}... "
    error "#{arg.inspect} doesn't exist" unless File.exists? arg
    upload = service.upload(arg)
    exit 1 unless upload
    fetch_link upload, options.link_type, options.copy_link?
  end
end


options = CloudApp::CLI::Options.parse ARGV
case options.action
when :help     then print_help
when :version  then print_version
when :bookmark then bookmark options
when :upload   then upload options
else                invalid_command
end
