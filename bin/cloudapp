#!/usr/bin/env ruby
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rubygems'
require 'gli'
require 'highline'
require 'pathname'
require 'yaml'

require 'cloudapp'
require 'cloudapp/drop_presenter'
require 'cloudapp/drop_service'
require 'cloudapp/identity'


def service
  CloudApp::DropService.as_identity(identity).tap do |service|
    service.logger.level = Logger::WARN
  end
end

def config_file
  File.expand_path '~/.cloudapprc'
end

def identity
  return unless File.exist?(config_file)
  config = File.open(config_file) {|file| YAML::load(file) }
  CloudApp::Identity.from_config config
end

def save_identity(email, password)
  File.open(config_file, 'w', 0600) do |file|
    YAML.dump({ email: email, password: password }, file)
  end
end

def color(*args)
  HighLine.new.color *args
end

def plain_text_credentials_warning
  """
#{ color('WARNING', :bold) }
Your credentials are stored #{ color('in plain text', :bold) } at ~/.cloudapprc. If this worries you,
keep an eye on issue #10 (https://github.com/cloudapp/cloudapp/issues/10). Some
sort of non-plaintext authentication is planned before 1.0 is released.
  """
end

def check_for_credentials
  return unless identity.nil?

  $stdout.puts [ plain_text_credentials_warning,
                 'Sign into your CloudApp account.' ]

  email    = HighLine.new.ask('Email: ')
  password = HighLine.new.ask('Password: ') {|q| q.echo = false }
  save_identity email, password
end

def format_from(global_options)
  if global_options[:format].nil?
    $stdout.tty? ? :pretty : :csv
  else
    global_options[:format].to_sym
  end
end

def privacy_from(options)
  if options[:private] || options[:public]
    options[:private] || !options[:public]
  end
end


include GLI

program_desc 'All the pleasures of CloudApp now at your terminal'
version CloudApp::VERSION

desc 'Output format (default: pretty for tty, csv otherwise)'
arg_name 'csv|pretty'
flag [:f, :format]

desc 'Create a new bookmark to each url and print each link'
arg_name 'url [url...]'
command [:bookmark, :shorten] do |c|

  c.desc 'Use a private (long) link'
  c.switch :private

  c.desc 'Use a public (short) link'
  c.switch :public

  c.action do |global_options, options, urls|
    check_for_credentials
    format  = format_from global_options
    private = privacy_from options

    urls.each do |url|
      url     = URI.parse url
      waiting = "Bookmarking #{ url }... "

      CloudApp::DropPresenter.print(on:      $stdout,
                                    waiting: waiting,
                                    format:  format) do
        new_options = { url: url }
        new_options[:private] = private unless private.nil?

        new_drop = service.create new_options
        new_drop.url
      end
    end
  end
end

desc 'Upload each file and print each link'
arg_name 'file [file...]'
command :upload do |c|

  c.desc 'Use a private (long) link'
  c.switch :private

  c.desc 'Use a public (short) link'
  c.switch :public

  c.action do |global_options, options, files|
    check_for_credentials
    format  = format_from global_options
    private = privacy_from options

    files.each do |file|
      file    = Pathname.new file
      waiting = "Uploading #{ file }... "

      CloudApp::DropPresenter.print(on:      $stdout,
                                    waiting: waiting,
                                    format:  format) do
        new_options = { path: file }
        new_options[:private] = private unless private.nil?

        new_drop = service.create new_options
        new_drop.url
      end
    end
  end
end

desc 'List the most recent drops'
command [:list, :ls] do |c|

  c.desc 'Number of drops to display'
  c.arg_name 'count'
  c.default_value '20'
  c.flag :n, :count

  c.action do |global_options, options, args|
    check_for_credentials

    count   = options[:count].to_i
    columns = { name: 'Name', url: 'Link', view_counter: 'Views' }
    format  = format_from global_options

    CloudApp::DropPresenter.print(on:      $stdout,
                                  columns: columns,
                                  format:  format) do
      service.drops count
    end
  end
end

exit GLI.run(ARGV)
